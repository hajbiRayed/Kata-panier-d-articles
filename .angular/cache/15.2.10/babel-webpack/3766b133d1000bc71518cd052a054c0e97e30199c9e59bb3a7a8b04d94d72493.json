{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartItemsService {\n  constructor() {\n    this.cartItemsSubject = new Subject();\n    this.cartItems = [];\n    this.cartItemsSubject.next([]);\n  }\n  emitValue(value) {\n    this.cartItems = value;\n    this.cartItemsSubject.next(value);\n  }\n  getValue() {\n    return this.cartItemsSubject.asObservable();\n  }\n  getCartItems() {\n    return this.cartItems;\n  }\n  addToCart(item) {\n    const existingItem = this.cartItems.find(i => i.product.id === item.product.id);\n    if (existingItem) {\n      if (existingItem.quantity !== undefined) {\n        existingItem.quantity += item.quantity;\n      }\n    } else {\n      this.cartItems.push(item);\n    }\n    this.cartItemsSubject.next(this.cartItems);\n  }\n  removeFromCart(item) {\n    this.cartItems = this.cartItems.filter(i => i !== item);\n    this.cartItemsSubject.next(this.cartItems);\n  }\n  clearCart() {\n    this.cartItems = [];\n    this.cartItemsSubject.next(this.cartItems);\n  }\n  static #_ = this.ɵfac = function CartItemsService_Factory(t) {\n    return new (t || CartItemsService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartItemsService,\n    factory: CartItemsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAoBA,OAAO,QAAO,MAAM;;AAOxC,OAAM,MAAOC,gBAAgB;EAI3BC;IAHQ,qBAAgB,GAAG,IAAIF,OAAO,EAAc;IACpD,cAAS,GAAe,EAAE;IAGxB,IAAI,CAACG,gBAAgB,CAACC,IAAI,CAAC,EAAE,CAAC;EAChC;EAEAC,SAAS,CAACC,KAAiB;IACzB,IAAI,CAACC,SAAS,GAAGD,KAAK;IACtB,IAAI,CAACH,gBAAgB,CAACC,IAAI,CAACE,KAAK,CAAC;EACnC;EAEAE,QAAQ;IACN,OAAO,IAAI,CAACL,gBAAgB,CAACM,YAAY,EAAE;EAC7C;EAEAC,YAAY;IACV,OAAO,IAAI,CAACH,SAAS;EACvB;EAEAI,SAAS,CAACC,IAAc;IACtB,MAAMC,YAAY,GAAG,IAAI,CAACN,SAAS,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAACC,EAAE,KAAKL,IAAI,CAACI,OAAO,CAACC,EAAE,CAAC;IAE/E,IAAIJ,YAAY,EAAE;MAChB,IAAIA,YAAY,CAACK,QAAQ,KAAKC,SAAS,EAAE;QACvCN,YAAY,CAACK,QAAQ,IAAIN,IAAI,CAACM,QAAQ;;KAEzC,MAAM;MACL,IAAI,CAACX,SAAS,CAACa,IAAI,CAACR,IAAI,CAAC;;IAG3B,IAAI,CAACT,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAACG,SAAS,CAAC;EAC5C;EAEAc,cAAc,CAACT,IAAc;IAC3B,IAAI,CAACL,SAAS,GAAG,IAAI,CAACA,SAAS,CAACe,MAAM,CAACP,CAAC,IAAIA,CAAC,KAAKH,IAAI,CAAC;IACvD,IAAI,CAACT,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAACG,SAAS,CAAC;EAC5C;EAEAgB,SAAS;IACP,IAAI,CAAChB,SAAS,GAAG,EAAE;IACnB,IAAI,CAACJ,gBAAgB,CAACC,IAAI,CAAC,IAAI,CAACG,SAAS,CAAC;EAC5C;EAAC;qBA3CUN,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAuB,SAAhBvB,gBAAgB;IAAAwB,YAFf;EAAM","names":["Subject","CartItemsService","constructor","cartItemsSubject","next","emitValue","value","cartItems","getValue","asObservable","getCartItems","addToCart","item","existingItem","find","i","product","id","quantity","undefined","push","removeFromCart","filter","clearCart","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Raed\\Desktop\\Kata-Angular\\src\\app\\coreModule\\cart-item-service\\cart-items.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {CartItem} from \"../model/cartItem.model\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartItemsService {\n  private cartItemsSubject = new Subject<CartItem[]>();\n  cartItems: CartItem[] = []\n\n  constructor() {\n    this.cartItemsSubject.next([]);\n  }\n\n  emitValue(value: CartItem[]) {\n    this.cartItems = value;\n    this.cartItemsSubject.next(value);\n  }\n\n  getValue(): Observable<CartItem[]> {\n    return this.cartItemsSubject.asObservable();\n  }\n\n  getCartItems(): CartItem[] {\n    return this.cartItems;\n  }\n\n  addToCart(item: CartItem): void {\n    const existingItem = this.cartItems.find(i => i.product.id === item.product.id);\n  \n    if (existingItem) {\n      if (existingItem.quantity !== undefined) {\n        existingItem.quantity += item.quantity;\n      }\n    } else {\n      this.cartItems.push(item);\n    }\n  \n    this.cartItemsSubject.next(this.cartItems);\n  }\n\n  removeFromCart(item: CartItem): void {\n    this.cartItems = this.cartItems.filter(i => i !== item);\n    this.cartItemsSubject.next(this.cartItems);\n  }\n\n  clearCart(): void {\n    this.cartItems = [];\n    this.cartItemsSubject.next(this.cartItems);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}