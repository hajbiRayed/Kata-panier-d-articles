{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TaxService {\n  constructor() {}\n  /**\r\n   * Calculate Price with tax\r\n   * @param product Product\r\n   */\n  getPriceWithTax(product) {\n    let taxRate = this.getTaxRate(product);\n    if (product.isImported) {\n      taxRate += 5;\n    }\n    let priceWithTax = product.price ? product.price * (1 + taxRate / 100) : 0;\n    priceWithTax = this.roundToNearest5Cents(priceWithTax);\n    return priceWithTax.toFixed(2);\n  }\n  /**\r\n   * Calculate tax rate  into consideration the product category\r\n   * @param product Product\r\n   */\n  getTaxRate(product) {\n    if (product.category === 'Nourriture' || product.category === 'Médicaments' && product.isImported === false) {\n      return 0;\n    } else if (product.category === 'Livres') {\n      return 10;\n    } else {\n      return 20;\n    }\n  }\n  /**\r\n   * Evaluate the tax from a CartItem as input\r\n   * @param cartItem: CartItem\r\n   */\n  getTax(cartItem) {\n    // @ts-ignore\n    return (cartItem.priceWithTax - cartItem.product.price).toFixed(2);\n  }\n  /**\r\n   * calculate total taxes for a list of cart items\r\n   * @param cartItems\r\n   */\n  getTotalTax(cartItems) {\n    let total = 0;\n    cartItems.forEach(cartItem => {\n      total += Number(this.getTax(cartItem));\n    });\n    return total;\n  }\n  /**\r\n   * calculate total taxes for a list of cart items\r\n   * @param cartItems\r\n   */\n  getTotalTTC(cartItems) {\n    let total = 0;\n    cartItems.forEach(el => {\n      total += el.priceWithTax;\n    });\n    return total;\n  }\n  /**\r\n   * calculate rounded price aux 5 centimes\r\n   * @param price\r\n   */\n  roundToNearest5Cents(price) {\n    return Math.ceil(price / 0.05) * 0.05;\n  }\n  static #_ = this.ɵfac = function TaxService_Factory(t) {\n    return new (t || TaxService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaxService,\n    factory: TaxService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,UAAU;EAErBC,eACA;EAEA;;;;EAIAC,eAAe,CAACC,OAAgB;IAC9B,IAAIC,OAAO,GAAG,IAAI,CAACC,UAAU,CAACF,OAAO,CAAC;IACtC,IAAIA,OAAO,CAACG,UAAU,EAAE;MACtBF,OAAO,IAAI,CAAC;;IAEd,IAAIG,YAAY,GAAGJ,OAAO,CAACK,KAAK,GAAGL,OAAO,CAACK,KAAK,IAAI,CAAC,GAAEJ,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC;IAEzEG,YAAY,GAAI,IAAI,CAACE,oBAAoB,CAACF,YAAY,CAAC;IACvD,OAAOA,YAAY,CAACG,OAAO,CAAC,CAAC,CAAC;EAChC;EAEA;;;;EAIAL,UAAU,CAACF,OAAgB;IACzB,IAAIA,OAAO,CAACQ,QAAQ,KAAK,YAAY,IAAKR,OAAO,CAACQ,QAAQ,KAAK,aAAa,IAAIR,OAAO,CAACG,UAAU,KAAK,KAAM,EAAE;MAC7G,OAAO,CAAC;KACT,MAAM,IAAIH,OAAO,CAACQ,QAAQ,KAAK,QAAQ,EAAE;MACxC,OAAO,EAAE;KACV,MAAM;MACL,OAAO,EAAE;;EAEb;EAEA;;;;EAIAC,MAAM,CAACC,QAAkB;IACvB;IACA,OAAO,CAACA,QAAQ,CAACN,YAAY,GAAGM,QAAQ,CAACV,OAAO,CAACK,KAAK,EAAEE,OAAO,CAAC,CAAC,CAAC;EACpE;EAEA;;;;EAIAI,WAAW,CAACC,SAAqB;IAC/B,IAAIC,KAAK,GAAG,CAAC;IACbD,SAAS,CAACE,OAAO,CAACJ,QAAQ,IAAG;MAC3BG,KAAK,IAAIE,MAAM,CAAC,IAAI,CAACN,MAAM,CAACC,QAAQ,CAAC,CAAC;IACxC,CAAC,CAAC;IACF,OAAOG,KAAK;EACd;EAEA;;;;EAIAG,WAAW,CAACJ,SAAqB;IAC/B,IAAIC,KAAK,GAAG,CAAC;IACbD,SAAS,CAACE,OAAO,CAAEG,EAAM,IAAI;MAE3BJ,KAAK,IAAII,EAAE,CAACb,YAAY;IAC1B,CAAC,CAAC;IACF,OAAOS,KAAK;EACd;EAEA;;;;EAIQP,oBAAoB,CAACD,KAAa;IACxC,OAAOa,IAAI,CAACC,IAAI,CAACd,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI;EACvC;EAAC;qBA1EUR,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAuB,SAAVvB,UAAU;IAAAwB,YAFT;EAAM","names":["TaxService","constructor","getPriceWithTax","product","taxRate","getTaxRate","isImported","priceWithTax","price","roundToNearest5Cents","toFixed","category","getTax","cartItem","getTotalTax","cartItems","total","forEach","Number","getTotalTTC","el","Math","ceil","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Raed\\Desktop\\Kata-Angular\\src\\app\\coreModule\\tax-service\\tax.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {Product} from '../model/product.model';\nimport {CartItem} from '../model/cartItem.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaxService {\n\n  constructor() {\n  }\n\n  /**\n   * Calculate Price with tax \n   * @param product Product\n   */\n  getPriceWithTax(product: Product): string {\n    let taxRate = this.getTaxRate(product);\n    if (product.isImported) {\n      taxRate += 5;\n    }\n    let priceWithTax = product.price ? product.price * (1+ taxRate / 100) : 0;\n    \n    priceWithTax  = this.roundToNearest5Cents(priceWithTax);\n    return priceWithTax.toFixed(2);\n  }\n\n  /**\n   * Calculate tax rate  into consideration the product category\n   * @param product Product\n   */\n  getTaxRate(product: Product): number {\n    if (product.category === 'Nourriture' || (product.category === 'Médicaments' && product.isImported === false)) {\n      return 0;\n    } else if (product.category === 'Livres') {\n      return 10;\n    } else {\n      return 20;\n    }\n  }\n\n  /**\n   * Evaluate the tax from a CartItem as input\n   * @param cartItem: CartItem\n   */\n  getTax(cartItem: CartItem): number {\n    // @ts-ignore\n    return (cartItem.priceWithTax - cartItem.product.price).toFixed(2);\n  }\n\n  /**\n   * calculate total taxes for a list of cart items\n   * @param cartItems\n   */\n  getTotalTax(cartItems: CartItem[]) {\n    let total = 0;\n    cartItems.forEach(cartItem => {\n      total += Number(this.getTax(cartItem));\n    });\n    return total;\n  }\n\n  /**\n   * calculate total taxes for a list of cart items\n   * @param cartItems\n   */\n  getTotalTTC(cartItems: CartItem[]) {\n    let total = 0;\n    cartItems.forEach((el:any) => {\n\n      total += el.priceWithTax;\n    });\n    return total;\n  }\n\n  /**\n   * calculate rounded price aux 5 centimes\n   * @param price \n   */\n  private roundToNearest5Cents(price: number): number {\n    return Math.ceil(price / 0.05) * 0.05;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}